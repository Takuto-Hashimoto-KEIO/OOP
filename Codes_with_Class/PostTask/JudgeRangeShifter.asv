classdef JudgeRangeShifter
    %JUDGERANGESHIFTER このクラスの概要をここに記述
    %   詳細説明をここに記述
    
    properties
        Property1
    end
    
    methods
        function obj = JudgeRangeShifter()
            %JUDGERANGESHIFTER このクラスのインスタンスを作成
        end

        % JudgeRangeShifterの全機能を一貫して実行
        function [mean_delays_per_5trials, window_shifter] = run_judge_range_shifter(obj)
            mean_delays_per_5trials = calculate_mean_delays(obj);
            
        end
    end

    methods (Access = private)
        % 成功打鍵のbeep音に対する遅れについて、5trialの平均を算出
        function mean_delays_per_5trials = calculate_mean_delays(obj)
            press_delays = NaN(5,1); % 初期化
            central_press_times = NaN(5,1); % 初期化

            for current_trial = 1:5
                central_press_times(current_trial) = obj.calculate_central_press_times();
                press_delays(current_trial) = obj.calculate_press_delays();
            end

            % 5trialの平均を算出
            mean_delays_per_5trials = mean(press_delays);
        end

        % 成功打鍵1つの押し下しの中央の時間を算出
        function central_press_times = calculate_central_press_times(obj)
            % 以下全てtrialごとに実行

            % 現在のtrialにおいて、成功した打鍵（judgeが1）のインデックスを取得
            success_indices = find(judge(current_trial, :) == 1);
            num_success_windows = length(success_indices);

            % key番号＆ループ数のペアを算出
            % 新しい配列を格納するための初期化
            success_loop_and_keys = zeros(num_success_windows, 2); % 2列(loopとkeyに対応)の配列を用意

            % 商+1と余りを計算し、result配列に格納
            for i = 1:length(success_indices)
                loop = floor(success_indices(i) / 4) + 1; % 商+1
                key = mod(success_indices(i), 4);   % 余り
                if key == 0
                    key = 4; % 余りが0の場合は4に置き換える
                end
                success_loop_and_keys(i, :) = [loop, key]; % 商+1と余りをペアとして格納
            end

            % 結果を表示
            disp('結果:');
            disp(success_loop_and_keys);

            % 新しい配列の初期化
            window_start = NaN(num_success_windows, 1);
            window_end = NaN(num_success_windows, 1);
            central_press_times(loop, key) = NaN(num_success_windows, 2); % loop×keyに対応する配列
            
            % 以下、1打鍵区間ごとにfor文で繰り返す
            % success_loop_and_keysを基に成功打鍵区間の時刻データを格納
            for i = 1:num_success_windows
                loop = success_loop_and_keys(i, 1); % ループ番号
                key = success_loop_and_keys(i, 2); % キー番号

                % (key番号＆ループ数のペアから、beep_times_keysを参照してbeep時刻を算出)

                % acception_window_startとacception_window_endから対応する時刻を取得
                window_start(i) = window_delimiters.acception_window_start(current_trial, loop, key);
                window_end(i) = window_delimiters.acception_window_end(current_trial, loop, key);

                % window_startとwindow_endに挟まれたpressed_timesを取得
                time_data = pressed_times(current_trial, key, :); % 特定のtrialとkeyの時系列データ
                time_data = squeeze(time_data); % 3次元から1次元に変換
                valid_times = time_data(time_data >= window_start(i) & time_data <= window_end(i)); % 範囲内の時刻を抽出

                % 1打鍵区間のpressed_timesの中央値を計算しcentral_press_timesに格納
                if ~isempty(valid_times)
                    central_press_times(loop, key) = median(valid_times); % 中央値を格納
                else
                    central_press_times(loop, key) = NaN; % 範囲内のデータがない場合はNaN
                end
            end
        end

        % 1trialでの全打鍵の平均打鍵遅れを算出
        function mean_press_delays = calculate_press_delays(obj)
            press_delays = NaN(num_success_windows, 2); % 初期化
            for i = 1:num_success_windows
                loop = success_loop_and_keys(i, 1); % ループ番号
                key = success_loop_and_keys(i, 2); % キー番号

                press_delays = central_press_times(loop, key) - beep_times_keys(current_trial, loop, key);
            end

            mean_press_delays = mean(press_delays);
        end

        function window_shifter = judge_range_shifter(obj)
            window_shifter = mean_delays_per_5trials*0.8; % [要検討] ずらす割合は0.8でいいのか？
        end
    end
end

